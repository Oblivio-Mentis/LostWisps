// File: Global/Systems/Animation/AnimationPriorityManager.cs

using Godot;
using System.Collections.Generic;

using LostWisps.Object;

namespace LostWisps.Global.Animation
{
    public partial class AnimationPriorityManager : Node
    {
        // Singleton instance
        public static AnimationPriorityManager Instance { get; private set; }

        // –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ: –æ–±—ä–µ–∫—Ç -> —Ç–∏–ø -> —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä
        private readonly Dictionary<Node, Dictionary<System.Type, object>> ActiveAnimations = new();

        public override void _EnterTree()
        {
            base._EnterTree();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä
            if (Instance != null && Instance != this)
            {
                QueueFree(); // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
                return;
            }

            Instance = this;
            Name = "AnimationPriorityManager";
        }

        public override void _Ready()
        {
            GD.Print("‚úÖ AnimationPriorityManager —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω");
        }

        public override void _ExitTree()
        {
            base._ExitTree();
            if (Instance == this)
                Instance = null;
        }

        /// <summary>
        /// –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä, –æ—Å—Ç–∞–Ω–æ–≤–∏–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞ –Ω–∞ —Ç–µ—Ö –∂–µ –æ–±—ä–µ–∫—Ç–∞—Ö.
        /// </summary>
        public static void RequestActivation<T>(Synchronizer<T> synchronizer) where T : struct
        {
            if (Instance == null)
            {
                GD.PrintErr("Instance is null!");
                return;
            }

            GD.Print("üåÄ –ù–∞—á–∏–Ω–∞–µ–º RequestActivation");

            var syncType = synchronizer.GetType();
            GD.Print($"üåÄ –¢–∏–ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞: {syncType}");

            foreach (var targetNode in synchronizer.TargetNodes)
            {
                GD.Print($"üåÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç: {targetNode?.Name ?? "null"}");

                if (targetNode == null)
                {
                    GD.PrintErr("‚ùå TargetNode == null");
                    continue;
                }

                if (!Instance.ActiveAnimations.TryGetValue(targetNode, out var activeSyncs))
                {
                    GD.Print($"üåÄ –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è {targetNode.Name}");
                    activeSyncs = new Dictionary<System.Type, object>();
                    Instance.ActiveAnimations[targetNode] = activeSyncs;
                }

                if (activeSyncs.TryGetValue(syncType, out var oldSyncObj))
                {
                    GD.Print($"üåÄ –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä: {oldSyncObj.GetType()}");
                    if (oldSyncObj is Synchronizer<T> oldSync)
                    {
                        oldSync.Deactivate();
                    }
                }

                GD.Print($"üåÄ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä: {syncType}");
                synchronizer.Activate(); // <-- –í–æ–∑–º–æ–∂–Ω–æ –∑–¥–µ—Å—å –æ—à–∏–±–∫–∞
                activeSyncs[syncType] = synchronizer;
            }
        }

        /// <summary>
        /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è).
        /// </summary>
        public static void Clear()
        {
            if (Instance == null)
                return;

            foreach (var entry in Instance.ActiveAnimations)
            {
                foreach (var syncObj in entry.Value.Values)
                {
                    if (syncObj is IActivatable sync)
                    {
                        sync.Deactivate();
                    }
                }
            }

            Instance.ActiveAnimations.Clear();
        }
    }
}